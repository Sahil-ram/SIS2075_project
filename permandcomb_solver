    #include <stdio.h>

    // Function to compute factorial of a number
long long factorial(int n) {
    long long result = 1;
    for (int i = 2; i <= n; i++) {
        result *= i;
    }
    return result;
}

// Function for Permutation P(n, r) = n! / (n - r)!
long long permutation(int n, int r) {
    return factorial(n) / factorial(n - r);
}

// Function for Combination C(n, r) = n! / (r! * (n - r)!)
long long combination(int n, int r) {
    return factorial(n) / (factorial(r) * factorial(n - r));
}

// Function for Permutation with Repetition P(n, r) = n^r
long long permutationWithRepetition(int n, int r) {
    long long result = 1;
    for (int i = 0; i < r; i++) {
        result *= n;
    }
    return result;
}

// Function for Combination with Repetition C(n + r - 1, r)
long long combinationWithRepetition(int n, int r) {
    return combination(n + r - 1, r);
}

// Function for Circular Permutation P_circular(n) = (n - 1)!
long long circularPermutation(int n) {
    return factorial(n - 1);
}

// Function for Distinguishable Permutation P(n; n1, n2, ..., nk) = n! / (n1! * n2! * ... * nk!)
long long distinguishablePermutation(int n, int freq[], int k) {
    long long result = factorial(n);
    for (int i = 0; i < k; i++) {
        result /= factorial(freq[i]);
    }
    return result;
}

// Function for Derangement D(n) 
long long derangement(int n) {
    long long derange[n + 1];
    derange[0] = 1;  // D(0) = 1
    derange[1] = 0;  // D(1) = 0
    for (int i = 2; i <= n; i++) {
        derange[i] = (i - 1) * (derange[i - 1] + derange[i - 2]);
    }
    return derange[n];
}